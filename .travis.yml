language: c
sudo: required
dist: bionic
services:
  - docker

jobs:
  include:
    - os: linux
      arch: amd64
      env:
        - RELEASE_TAG_DOWNSTREAM=1
    - os: linux
      arch: arm64
      env:
        - RELEASE_TAG_DOWNSTREAM=0

before_install:
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    - sudo apt-get update -qq
    - sudo apt-get install --yes -qq gcc-6 g++-6 gdb
    - sudo apt-get install libssl-dev open-iscsi libjson-c-dev ioping jq net-tools
    # use gcc-6 by default
    - sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc
    - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-6 /usr/bin/g++
install:
    - ./autogen.sh
    # we are running build two times. One is without replication code and
    # another one is with replication code. The reason behind running build
    # without replication code is to make sure that replication feature
    # related code doesn't break the existing target code.
    - ./configure
    - make check_license
    - make
    - make clean
    - ARCH=$(uname -m)
    - echo ARCH "$ARCH"
    - |
      if [ "${ARCH}" = "x86_64" ]; then
      ./configure --enable-debug --enable-replication
      elif [ "${ARCH}" = "aarch64" ]; then
      ./configure --enable-debug --enable-replication --build=arm-linux
      fi
    - make
script:
    # run ztest and test supported zio backends
    - |
      if [ "${ARCH}" = "x86_64" ]; then
      sudo bash ./print_debug_info.sh &
      ## If test takes more than 45 minutes then print tail logs in /tmp/istgt.log and terminate travis
      ## Having 60minutes is causing travis timeout and not able to know easily which test is failed
      travis_wait 45 sudo bash ./test_istgt.sh || ( sudo tail -500 /tmp/istgt.log && travis_terminate 1 );
      fi
    - pwd
    - ./build_image.sh
    # If this build is running due to travis release tag, and
    # this job indicates to push the release downstream, then
    # go ahead and tag the dependent repo.
    # This is controlled by ENV RELEASE_TAG_DOWNSTREAM.
    #
    # $TRAVIS_BRANCH contains the same value as $TRAVIS_TAG.
    # Example: v1.9.0-RC1 tag and v1.9.0-RC1 branch,
    # when github release tag is v1.9.0-RC1
    #
    # OpenEBS release are triggered from release branches that are named
    # as v1.9.x or v1.9.x-hotfix or v1.9.x-custom
    #
    # The tag to release branch conversion should be handled as follows:
    # v1.9.0-RC1 => should be v1.9.x
    # v1.9.0-hotfixid => should be v1.9.x-hotfixid
    # v1.9.0 => should be v1.9.x
    # v1.9.1 => should be v1.9.x
    # v1.9.0-custom-RC1 => should be v1.9.x-custom
    # v1.9.0-custom => should be v1.9.x-custom
    # v1.9.1-custom => should be v1.9.x-custom
    # Convert the TRAVIS_TAG to the corresponding release branch.
    # OpenEBS release are done from branches named as v1.9.x. 
    # Convert the TRAVIS_TAG to the corresponding release branch.
    #
    # Allow for building forked openebs pipelines. 
    # Tag the downstream repos under current repo org. 
    - if [ -z $REPO_ORG ]; then
        REPO_ORG=$(echo "$TRAVIS_REPO_SLUG" | cut -d'/' -f1);
        export REPO_ORG;
      fi
    - if [ ! -z $TRAVIS_TAG ] && [ $RELEASE_TAG_DOWNSTREAM = 1 ] && [ "$TRAVIS_REPO_SLUG" == "$REPO_ORG/istgt" ]; then
        TAG_SUFFIX=$(echo "$TRAVIS_TAG" | cut -d'-' -f2);
        if [ "$TAG_SUFFIX" == "$TRAVIS_TAG" ] || [[ $TAG_SUFFIX =~ ^RC ]]; then
          REL_SUFFIX="";
        else
          REL_SUFFIX="-$TAG_SUFFIX";
        fi

        REL_BRANCH=$(echo $(echo "$TRAVIS_TAG" | cut -d'-' -f1 | rev | cut -d'.' -f2- | rev).x$REL_SUFFIX);

        ./buildscripts/git-release "$REPO_ORG/external-storage" "$TRAVIS_TAG" "$REL_BRANCH" || travis_terminate 1;
        ./buildscripts/git-release "$REPO_ORG/cstor-operators" "$TRAVIS_TAG" "$REL_BRANCH" || travis_terminate 1;
      fi
notifications:
  email:
    recipients:
    - ashutosh.kumar@mayadata.io
    - kiran.mova@mayadata.io
    - prateek.pandey@mayadata.io
    - sai.chaithanya@mayadata.io
    - shubham.bajpai@mayadata.io
